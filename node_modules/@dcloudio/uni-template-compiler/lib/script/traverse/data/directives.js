const t = require('@babel/types')

const {
  INTERNAL_SET_MODEL
} = require('../../../constants')

function getModelEventFunctionExpr (propExpr, propPath, modifiers) {
  const propPaths = propPath.split('.')
  return t.functionExpression(
    null,
    [t.identifier('$event')],
    t.blockStatement(
      [
        t.returnStatement(
          t.callExpression(
            t.identifier(INTERNAL_SET_MODEL),
            [
              propExpr,
              t.stringLiteral(propPaths.pop()),
              t.identifier('$event'),
              t.arrayExpression(modifiers)
            ]
          )
        )
      ]
    )
  )
}
module.exports = function processDir (paths, path, state) {
  const directivesPath = paths['directives']
  if (directivesPath) {
    /**
         * directives: [{
         *       name: "model",
         *       rawName: "v-model",
         *      value: (aaa.cart_amount),
         *     expression: "aaa.cart_amount"
         *}],
         */
    const modelObjectExpr = directivesPath.node.value.elements.find(
      objectExpression => {
        return objectExpression.properties.find(property => {
          return property.key.name === 'name' && property.value.value === 'model'
        })
      }
    )
    if (modelObjectExpr) {
      const valueProperty = modelObjectExpr.properties.find(property => {
        return property.key.name === 'value'
      })
      const exprProperty = modelObjectExpr.properties.find(property => {
        return property.key.name === 'expression'
      })
      const modifiersProperty = modelObjectExpr.properties.find(property => {
        return property.key.name === 'modifiers'
      })
      if (exprProperty) {
        const onPath = paths['on']

        const existingInput = onPath.node.value.properties.find(
          property => property.key.value === 'input'
        )
        if (existingInput) {
          // remove old model input event
          if (!t.isArrayExpression(existingInput.value)) {
            existingInput.value = t.arrayExpression([])
          } else {
            existingInput.value.elements.shift()
          }
          const modifiers = []
          if (modifiersProperty) {
            const properties = modifiersProperty.value.properties
            if (properties.find(property => property.key.value === 'number')) {
              modifiers.push(t.stringLiteral('number'))
            }
            if (properties.find(property => property.key.value === 'trim')) {
              modifiers.push(t.stringLiteral('trim'))
            }
          }
          existingInput.value.elements.unshift(
            getModelEventFunctionExpr(
              valueProperty.value,
              exprProperty.value.value.trim(),
              modifiers
            )
          )
        }
      }
    }
  }
  return []
}
