const fs = require('fs')
const path = require('path')

process.env.UNI_CLI_CONTEXT = path.resolve(__dirname, '../../../')

const {
  hasModule,
  isInHBuilderX
} = require('@dcloudio/uni-cli-shared')

process.env.UNI_HBUILDERX_PLUGINS = process.env.UNI_HBUILDERX_PLUGINS || path.resolve(__dirname, '../../../../')

if (isInHBuilderX) { // 在 HBuilderX 插件中运行修改预编译器指向
  const moduleAlias = require('module-alias')
  // 重定向 weex-styler
  moduleAlias.addAlias('weex-styler', path.resolve(__dirname, 'packages/weex-styler'))

  moduleAlias.addAlias('typescript', path.resolve(process.env.UNI_HBUILDERX_PLUGINS,
    'compile-typescript/node_modules/typescript'))
  moduleAlias.addAlias('less', path.resolve(process.env.UNI_HBUILDERX_PLUGINS,
    'compile-less/node_modules/less'))
  moduleAlias.addAlias('node-sass', path.resolve(process.env.UNI_HBUILDERX_PLUGINS,
    'compile-node-sass/node_modules/node-sass-china'))
  moduleAlias.addAlias('stylus', path.resolve(process.env.UNI_HBUILDERX_PLUGINS,
    'compile-stylus/node_modules/stylus'))
  moduleAlias.addAlias('pug', path.resolve(process.env.UNI_HBUILDERX_PLUGINS,
    'compile-pug-cli/node_modules/pug'))

  if (!hasModule('typescript')) { // 因为 cli-plugin-typescript 会直接读取typescript/package.json，故，如果未安装 typescript，则先设置一个假的
    moduleAlias.addAlias('typescript/package.json', path.resolve(__dirname, 'typescript.json'))
    moduleAlias.addAlias('fork-ts-checker-webpack-plugin', path.resolve(__dirname,
      'fork-ts-checker-webpack-plugin.fake.js'))
  }
}

module.exports = (api, options) => { // 仅处理 app-plus 相关逻辑
  if (process.env.UNI_PLATFORM !== 'app-plus') {
    return
  }

  if (!fs.existsSync(path.resolve(process.env.UNI_HBUILDERX_PLUGINS, 'weapp-tools/lib/index.js'))) {
    console.error('请使用 HBuilderX 编译运行至 app-plus 平台')
    process.exit(0)
  }

  const plugins = []

  const output = {}
  const WebpackAppPlusPlugin = require('./packages/webpack-app-plus-plugin')
  const isWin = /^win/.test(process.platform)
  const normalizePath = path => (isWin ? path.replace(/\\/g, '/') : path)

  plugins.push(new WebpackAppPlusPlugin())

  const sourceRoot = normalizePath(process.env.UNI_INPUT_DIR)

  // sourcemap 输出相对路径
  output.devtoolModuleFilenameTemplate = function (info) {
    const absoluteResourcePath = normalizePath(info.absoluteResourcePath)
    if (~absoluteResourcePath.indexOf(sourceRoot)) {
      const extname = path.extname(absoluteResourcePath)
      if (extname === '.js' || absoluteResourcePath.indexOf('vue&type=script') !== -1) {
        return `${absoluteResourcePath.replace(sourceRoot, 'uni-app://')}?${info.hash}`
      }
    }
    return absoluteResourcePath
  }

  api.configureWebpack(webpackConfig => {
    return {
      output,
      plugins
    }
  })
}

module.exports.defaultModes = {
  serve: 'development',
  build: 'production'
}
